[project]
name = "rst_trap_finder"
version = "0.2.0"
description = "Comprehensive word graph analysis toolkit for finding RST trap words and strategic game analysis"
authors = [{name="AutoGen", email="autogen@example.com"}]
readme = "README.md"
license = {file = "LICENSE"}
requires-python = ">=3.11"
keywords = ["game-theory", "graph-analysis", "word-games", "network-analysis", "strategy"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Games/Entertainment",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = [
    "networkx>=3.0",
    "numpy>=1.24.0",
    "pandas>=2.0.0",
    "scipy>=1.10.0",
    "click>=8.0.0",
    "rich>=13.0.0",
    "tqdm>=4.65.0",
    "pydantic>=2.0.0",
]

[project.optional-dependencies]
viz = [
    "matplotlib>=3.6.0",
    "plotly>=5.15.0",
    "seaborn>=0.12.0",
    "graphviz>=0.20.0",
]
ml = [
    "scikit-learn>=1.3.0",
    "optuna>=3.3.0",
    "joblib>=1.3.0",
    "gensim>=4.3.0",
]
web = [
    "fastapi>=0.100.0",
    "uvicorn>=0.23.0",
    "jinja2>=3.1.0",
    "python-multipart>=0.0.6",
]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-benchmark>=4.0.0",
    "hypothesis>=6.80.0",
    "black>=23.0.0",
    "ruff>=0.0.280",
    "mypy>=1.5.0",
    "pre-commit>=3.3.0",
    "sphinx>=7.1.0",
    "sphinx-rtd-theme>=1.3.0",
]
all = [
    "rst_trap_finder[viz,ml,web,dev]"
]

[project.urls]
Homepage = "https://github.com/xhtdby/rst"
Documentation = "https://rst-trap-finder.readthedocs.io"
Repository = "https://github.com/xhtdby/rst.git"
"Bug Tracker" = "https://github.com/xhtdby/rst/issues"

[build-system]
requires = ["hatchling>=1.17.0"]
build-backend = "hatchling.build"

[project.scripts]
rst_trap_finder = "rst_trap_finder.cli:main"

[tool.hatch.build.targets.wheel]
packages = ["src/rst_trap_finder"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/docs",
    "/data",
    "/examples",
]

# Black configuration
[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

# Ruff configuration
[tool.ruff]
line-length = 100
target-version = "py311"
select = ["E", "F", "I", "N", "W", "UP", "B", "C4", "PIE", "T20"]
ignore = ["E203", "E501"]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["T20"]

# MyPy configuration
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "networkx.*",
    "plotly.*",
    "sklearn.*",
    "optuna.*",
    "gensim.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=rst_trap_finder",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "benchmark: marks tests as benchmarks",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/site-packages/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
